<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.evomaster</groupId>
    <artifactId>evomaster</artifactId>

    <!--
        To change version in all modules, use:
        mvn versions:set -DnewVersion=a.b.c
     -->
    <version>1.0.2-SNAPSHOT</version>

    <inceptionYear>2016</inceptionYear>
    <name>EvoMaster</name>
    <description>A tool for automatically generating system-level test cases</description>
    <url>www.evomaster.org</url>
    <packaging>pom</packaging>

    <modules>
        <module>dbconstraint</module>
        <module>core</module>
        <module>client-java</module>
        <module>e2e-tests</module>
        <module>experiments</module>
        <module>report</module>
        <module>resource-rest-experiments</module>
    </modules>

    <issueManagement>
        <system>Github</system>
        <url>https://github.com/EMResearch/evomaster/issues</url>
    </issueManagement>

    <scm>
        <connection>scm:git:https://github.com/EMResearch/evomaster.git</connection>
        <developerConnection>scm:git:https://github.com/EMResearch/evomaster.git</developerConnection>
        <url>https://github.com/EMResearch/evomaster/tree/master</url>
    </scm>


    <profiles>
        <profile>
            <!--
                   This profile is needed when making a deployment to Maven Central.
                   Note: we upload only the client library, not the whole EvoMaster.
                   However, we also need this root pom.xml. So,

                   On the root:
                   mvn  -N -Pdeployment -DskipTests  deploy

                   On "client-java":
                   mvn clean -Pdeployment -DskipTests  deploy
              -->
            <id>deployment</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <developers>
        <developer>
            <id>arcuri82</id>
            <name>Andrea Arcuri</name>
            <email>arcuri82@gmail.com</email>
            <url>http://www.arcuriandrea.org</url>
            <timezone>2</timezone>
            <roles>
                <role>Architect/Developer</role>
            </roles>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>GNU Lesser General Public License (LGPL), version 3</name>
            <url>http://www.gnu.org/licenses/lgpl-3.0.en.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <kotlin.version>1.3.61</kotlin.version>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
        <junit.jupiter.version>5.6.0</junit.jupiter.version>
        <junit.platform.version>1.6.0</junit.platform.version>
        <dropwizard.version>1.3.7</dropwizard.version>
        <swagger.version>1.6.0</swagger.version>
        <swagger.parser-v2.version>1.0.39</swagger.parser-v2.version>
        <swagger.parser-v3.version>2.0.16</swagger.parser-v3.version>
        <springboot.version>2.2.0.RELEASE</springboot.version>
        <springfox.version>2.9.2</springfox.version>
        <springdoc.version>1.2.21</springdoc.version>
        <jetty.version>9.4.12.v20180830</jetty.version>
        <jersey.version>2.29.1</jersey.version>
        <javax.el.version>2.2.5</javax.el.version>
        <jackson.version>2.9.7</jackson.version>
        <asm.version>7.2</asm.version>
        <testcontainers.version>1.12.4</testcontainers.version>
        <antlr.version>4.7.2</antlr.version>
        <nlp.version>3.9.2</nlp.version>
        <dk.brics.automaton.version>1.11-8</dk.brics.automaton.version>
        <jgrapht.version>0.8.3</jgrapht.version>
    </properties>


    <dependencyManagement>

        <!--
            Use

            mvn versions:display-dependency-updates -DprocessDependencyManagement=false

            for plugins, use:

            mvn versions:display-plugin-updates
        -->

        <dependencies>

            <!-- Internal Modules -->
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-dbconstraint</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-controller</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-controller-api</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-database-spy</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-instrumentation</artifactId>
                <version>${project.version}</version>
                <type>jar</type>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-instrumentation</artifactId>
                <version>${project.version}</version>
                <type>test-jar</type>
            </dependency>
            <dependency>
                <groupId>org.evomaster</groupId>
                <artifactId>evomaster-client-java-instrumentation-shared</artifactId>
                <version>${project.version}</version>
            </dependency>


            <!-- Kotlin -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-reflect</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-compiler-embeddable</artifactId>
                <version>${kotlin.version}</version>
                <scope>test</scope>
            </dependency>


            <!-- Javax -->
            <dependency>
                <groupId>javax.el</groupId>
                <artifactId>javax.el-api</artifactId>
                <version>${javax.el.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.web</groupId>
                <artifactId>javax.el</artifactId>
                <version>${javax.el.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>2.1.1</version>
            </dependency>


            <!-- Dependency Injection -->
            <dependency>
                <groupId>com.google.inject</groupId>
                <artifactId>guice</artifactId>
                <!--
                    We ll need to check when new version comes with fix for:
                    https://github.com/google/guice/issues/1133
                -->
                <version>4.2.2</version>
            </dependency>
            <dependency> <!-- This is needed as Guice has no LifeCycle management -->
                <groupId>com.netflix.governator</groupId>
                <artifactId>governator</artifactId>
                <version>1.17.10</version>
                <exclusions>
                    <!--It looks like it uses quite a few old versions -->
                    <exclusion>
                        <groupId>org.hibernate</groupId>
                        <artifactId>hibernate-validator</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>com.fasterxml.jackson.core</groupId>
                        <artifactId>jackson-databind</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!--  JVM  -->
            <dependency> <!-- For bytecode instrumentation -->
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm</artifactId>
                <version>${asm.version}</version>
            </dependency>
            <dependency> <!-- For bytecode instrumentation -->
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-util</artifactId>
                <version>${asm.version}</version>
            </dependency>
            <dependency> <!-- To attach instrumenting JavaAgent at runtime -->
                <groupId>com.ea.agentloader</groupId>
                <artifactId>ea-agent-loader</artifactId>
                <version>1.0.3</version>
            </dependency>


            <!-- Misc -->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>6.1.0.Final</version>
            </dependency>
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>2.8.6</version>
            </dependency>
            <dependency> <!-- Used to handle terminal/console inputs -->
                <groupId>net.sf.jopt-simple</groupId>
                <artifactId>jopt-simple</artifactId>
                <version>6.0-alpha-3</version>
            </dependency>
            <dependency> <!-- Used for parsers -->
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-runtime</artifactId>
                <version>${antlr.version}</version>
            </dependency>
            <dependency><!-- Used for Java Regex distances -->
                <!-- BSD -->
                <groupId>dk.brics.automaton</groupId>
                <artifactId>automaton</artifactId>
                <version>${dk.brics.automaton.version}</version>
            </dependency>
            <dependency><!-- Used for Java Regex distances -->
                <!-- LGPL -->
                <groupId>net.sf.jgrapht</groupId>
                <artifactId>jgrapht</artifactId>
                <version>${jgrapht.version}</version>
            </dependency>
            <!-- Logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.24</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>


            <!-- Jetty -->
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-server</artifactId>
                <version>${jetty.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-servlet</artifactId>
                <version>${jetty.version}</version>
            </dependency>

            <!-- Jersey -->
            <dependency>
                <groupId>org.glassfish.jersey.core</groupId>
                <artifactId>jersey-client</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.core</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-servlet-core</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-jetty-http</artifactId>
                <version>${jersey.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.inject</groupId>
                <artifactId>jersey-hk2</artifactId>
                <version>${jersey.version}</version>
            </dependency>

            <!-- Jackson -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.jaxrs</groupId>
                <artifactId>jackson-jaxrs-base</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.jaxrs</groupId>
                <artifactId>jackson-jaxrs-json-provider</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.media</groupId>
                <artifactId>jersey-media-json-jackson</artifactId>
                <version>${jersey.version}</version>
            </dependency>


            <!-- DropWizard -->
            <dependency>
                <groupId>io.dropwizard</groupId>
                <artifactId>dropwizard-core</artifactId>
                <version>${dropwizard.version}</version>
            </dependency>
            <dependency>
                <groupId>io.dropwizard</groupId>
                <artifactId>dropwizard-assets</artifactId>
                <version>${dropwizard.version}</version>
            </dependency>
            <dependency>
                <groupId>io.dropwizard</groupId>
                <artifactId>dropwizard-testing</artifactId>
                <version>${dropwizard.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.dropwizard</groupId>
                <artifactId>dropwizard-jetty</artifactId>
                <version>${dropwizard.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- Spring -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>${springboot.version}</version>
            </dependency>


            <!--  SpringFox: Swagger documentation for SpringBoot-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${springfox.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-spring-web</artifactId>
                <version>${springfox.version}</version>
            </dependency>

            <!--  SpringDoc: Swagger/OpenApi documentation for SpringBoot-->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-ui</artifactId>
                <version>${springdoc.version}</version>
            </dependency>


            <!--
                Swagger for JaxRS

                TODO: at the moment, only used for Dropwizard test.
                We ll need to update to v3 version
              -->
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-jaxrs</artifactId>
                <version>${swagger.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>com.fasterxml.jackson.core</groupId>
                        <artifactId>jackson-databind</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-jersey2-jaxrs</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-hibernate-validations</artifactId>
                <version>${swagger.version}</version>
            </dependency>


            <!--  OpenApi/Swagger Parser-->
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-parser</artifactId>
                <version>${swagger.parser-v2.version}</version>
            </dependency>
            <dependency>
                <groupId>io.swagger.parser.v3</groupId>
                <artifactId>swagger-parser</artifactId>
                <version>${swagger.parser-v3.version}</version>
            </dependency>



            <!-- databases -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.4.197</version>
            </dependency>
            <dependency> <!-- Used to intercept SQL commands -->
                <groupId>p6spy</groupId>
                <artifactId>p6spy</artifactId>
                <version>3.6.0</version>
            </dependency>
            <dependency>
                <groupId>com.github.jsqlparser</groupId>
                <artifactId>jsqlparser</artifactId>
                <version>2.0</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.1.4</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>6.1.3</version>
            </dependency>

            <!--   XML  -->
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.3.1</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>2.3.1</version>
            </dependency>

            <!-- test dependencies -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit.jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.platform</groupId>
                <artifactId>junit-platform-launcher</artifactId>
                <version>${junit.platform.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-params</artifactId>
                <version>${junit.jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>4.1.2</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-all</artifactId>
                <version>1.3</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>2.23.4</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <!-- To use Docker from tests -->
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <pluginManagement>
            <plugins>

                <!-- To run unit tests -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M4</version>
                    <configuration>
                        <forkCount>1</forkCount>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <rerunFailingTestsCount>2</rerunFailingTestsCount>
                        <!--
                            @{argLine} is needed for JaCoCo
                            -Djdk.attach.allowAttachSelf=true is needed for Java 9+
                            TODO might not needed when using workaround like in ByteBuddy
                            of creating an external process to do the Agent attachment
                            https://github.com/raphw/byte-buddy/issues/295
                        -->
                        <argLine>@{argLine} -Xms1024m -Xmx2048m -Djdk.attach.allowAttachSelf=true</argLine>
                        <!-- Needed for some weird bug in JDK used in CircleCI-->
                        <useSystemClassLoader>false</useSystemClassLoader>
                    </configuration>

                </plugin>

                <!-- To compile Kotlin code -->
                <plugin>
                    <artifactId>kotlin-maven-plugin</artifactId>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <version>${kotlin.version}</version>
                    <configuration>
                        <jvmTarget>${java.version}</jvmTarget>
                    </configuration>
                    <executions>
                        <execution>
                            <id>compile</id>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                            <configuration>
                                <sourceDirs>
                                    <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                                    <sourceDir>${project.basedir}/src/main/java</sourceDir>
                                    <sourceDir>${project.basedir}/target/generated-sources/antlr4</sourceDir>
                                </sourceDirs>
                            </configuration>
                        </execution>
                        <execution>
                            <id>test-compile</id>
                            <goals>
                                <goal>test-compile</goal>
                            </goals>
                            <configuration>
                                <sourceDirs>
                                    <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                                    <sourceDir>${project.basedir}/src/test/java</sourceDir>
                                </sourceDirs>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- To compile Java code -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.5.1</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                    <executions>
                        <!-- Replacing default-compile as it is treated specially by maven -->
                        <execution>
                            <id>default-compile</id>
                            <phase>none</phase>
                        </execution>
                        <!-- Replacing default-testCompile as it is treated specially by maven -->
                        <execution>
                            <id>default-testCompile</id>
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>java-compile</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>java-test-compile</id>
                            <phase>test-compile</phase>
                            <goals>
                                <goal>testCompile</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- To create Jar files for tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>test-jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- To create self-executable uber/fat jars -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.6</version>
                </plugin>

                <!-- To create self-executable uber/fat jars with shaded packages-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>3.2.1</version>
                </plugin>

                <!-- To sign Jar files before uploading them to Maven Central -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.6</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- We deploy to SonaType, which then sync to Maven Central -->
                <plugin>
                    <groupId>org.sonatype.plugins</groupId>
                    <artifactId>nexus-staging-maven-plugin</artifactId>
                    <version>1.6.8</version>
                    <extensions>true</extensions>
                    <configuration>
                        <serverId>ossrh</serverId>
                        <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                        <autoReleaseAfterClose>true</autoReleaseAfterClose>
                    </configuration>
                </plugin>

                <!--  Needed to be able to run on CircleCI -->
                <plugin>
                    <groupId>de.qaware.maven</groupId>
                    <artifactId>go-offline-maven-plugin</artifactId>
                    <version>1.1.0</version>
                </plugin>

                <!--
                  Used to calculate code-coverage of the tests.
                  Note: Kotlin still has problems, as its compiler not marking
                  yet the automatically generated/added functions
                  -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.5</version>
                    <executions>
                        <execution>
                            <id>default-prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>default-report</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    To publish JaCoCo results to Coveralls.
                    Should be run only on Travis, by adding "coveralls:report"

                    WARN: unfortunately, does not seem to work well with Kotlin :(
                    So, rather use CodeCov, which is setup directly Travis
                 -->
                <plugin>
                    <groupId>org.eluder.coveralls</groupId>
                    <artifactId>coveralls-maven-plugin</artifactId>
                    <version>4.3.0</version>
                    <configuration>
                        <sourceDirectories>
                            <param>src/main/java</param>
                            <param>src/main/kotlin</param>
                        </sourceDirectories>
                    </configuration>
                </plugin>

                <!-- Used for parsers. Eg, to analyze regex -->
                <plugin>
                    <groupId>org.antlr</groupId>
                    <artifactId>antlr4-maven-plugin</artifactId>
                    <version>${antlr.version}</version>
                    <configuration>
                        <listener>false</listener>
                        <visitor>true</visitor>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>antlr4</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>


        <plugins>
            <!-- Executed JaCoCo in all the modules. Default binding is on "verify" -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>


</project>